// Tasks im SubModul ausführen: gradle MODUL:clean build
buildscript {
    // Für Plugins
    repositories {
        mavenLocal()
        mavenCentral()
        gradlePluginPortal() // maven { url "https://plugins.gradle.org/m2"; name "plugins-gradle" }
    }

    dependencies {
        classpath "de.freese.gradle:gradle-plugins:0.0.1-SNAPSHOT"
        classpath "io.spring.gradle:dependency-management-plugin:$version_springDependencyManagement"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$version_springBoot"
        classpath "org.openjfx:javafx-plugin:$version_javafxPlugin"
    }
}

subprojects {
    apply plugin: "java"
    apply plugin: "io.spring.dependency-management"
    apply plugin: "de.freese.gradle.plugin.conventions"

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:$version_springBoot"
        }

        dependencies {
            dependency "com.danielflower.apprunner:javasysmon:$version_javasysmon"
            dependency "com.lmax:disruptor:$version_disruptor"
            dependency "dev.failsafe:failsafe:$version_failsafe"
            dependency "org.apache.commons:commons-compress:$version_commonsCompress"
            dependency "org.apache.lucene:lucene-analyzers-common:$version_lucene"

            dependencySet(group: "org.apache.maven", version: "$version_maven") {
                entry "maven-model-builder"
                entry "maven-settings-builder"
            }

//            dependency(group: "org.apache.tomcat", name: "tomcat-catalina", version: dependencyManagement.importedProperties["tomcat.version"])
//            dependency "org.apache.tomcat:tomcat-catalina:${dependencyManagement.importedProperties["tomcat.version"]}"
            dependencySet(group: "org.apache.tomcat", version: dependencyManagement.importedProperties["tomcat.version"]) {
                entry "tomcat-catalina"
                entry "tomcat-juli"
            }

            dependencySet(group: "org.apache.xmlgraphics", version: "$version_batik") {
                entry "batik-codec"
                entry "batik-swing"
            }

            dependency "org.codehaus.plexus:plexus-cipher:$version_plexusCipher"
            dependency "org.codehaus.plexus:plexus-container-default:$version_plexus"
            dependency "org:jaudiotagger:$version_jaudiotagger"
            dependency "org.jsoup:jsoup:$version_jsoup"

            dependency("org.jfree:jfreechart:$version_jfreechart") {
                exclude "com.lowagie:itext"
                exclude "xml-apis:xml-apis"
            }
        }
    }

    dependencies {
        //implementation(platform("de.freese:maven-bom:$version_mavenBom"))
        //testImplementation("org.junit.jupiter:junit-jupiter-engine")
    }
}

project("misc-cache") {
    description = "Demos für Caching"
    dependencies {
        implementation("com.github.ben-manes.caffeine:caffeine")
        implementation("com.hazelcast:hazelcast")
        implementation("net.sf.ehcache:ehcache")
        implementation("org.ehcache:ehcache")
        implementation("org.slf4j:jul-to-slf4j")

        runtimeOnly("org.slf4j:slf4j-simple")
    }
}

project("misc-genetic-algorithm") {
    description = "Genetic Algorythms"
    dependencies {
        testImplementation("org.junit.jupiter:junit-jupiter-engine")
    }
}

project("misc-jconky") {
    apply plugin: "org.openjfx.javafxplugin"
    apply plugin: "org.springframework.boot"
    description = "Java-Clone of Linux Tool 'conky'"
    dependencies {
        implementation("org.slf4j:slf4j-api")

        runtimeOnly("ch.qos.logback:logback-classic")

        testImplementation("org.junit.jupiter:junit-jupiter-engine")

        javafx {
            version = "$version_javafxBase"
            modules = ["javafx.controls", "javafx.swing"]
        }
    }
    // Start: gradle bootRun --args="--spring.profiles.active=dev"
    bootJar {
        mainClass = "de.freese.jconky.JConkyLauncher"
    }
}

project("misc-jsensors") {
    description = "Sensor-Application for System-Monitoring (simplified micrometer clone)"
    dependencies {
        implementation("com.danielflower.apprunner:javasysmon")
        implementation("com.lmax:disruptor")
        implementation("io.rsocket:rsocket-transport-netty")
        implementation("org.slf4j:slf4j-api")

        testImplementation("org.junit.jupiter:junit-jupiter-engine")
        testImplementation("org.slf4j:slf4j-simple")
        testImplementation("org.hsqldb:hsqldb")
        testImplementation("org.jfree:jfreechart")
        testImplementation("org.junit.jupiter:junit-jupiter-engine")
    }
}

project("misc-junit5") {
    description = "Demos für JUnit5"
    dependencies {
        testImplementation("org.assertj:assertj-core")
        testImplementation("org.junit.jupiter:junit-jupiter-engine")
        testImplementation("org.junit.jupiter:junit-jupiter-params")
        testImplementation("org.junit.platform:junit-platform-suite-api")
        testImplementation("org.junit.vintage:junit-vintage-engine")
        testImplementation("org.mockito:mockito-junit-jupiter")
    }
}

project("misc-micrometer") {
    description = "Micrometer Demo"
    dependencies {
        implementation("io.micrometer:micrometer-core")
        implementation("io.micrometer:micrometer-registry-prometheus")
        implementation("org.slf4j:slf4j-api")

        runtimeOnly("org.slf4j:slf4j-simple")

        testImplementation("org.junit.jupiter:junit-jupiter-engine")
    }
}

project("misc-openstreetmap") {
    apply plugin: "java-library"
    description = "Projekt fuer das Rendern von GEO Daten von http://www.openstreetmap.org"
    dependencies {
    }
}

project("misc-sonstiges") {
    apply plugin: "org.openjfx.javafxplugin"
    description = "Alles zum ausprobieren"
    dependencies {
        implementation("com.fasterxml.jackson.dataformat:jackson-dataformat-xml")
        implementation("com.fasterxml.jackson.module:jackson-module-jaxb-annotations")
        implementation("com.h2database:h2")
        implementation("com.lmax:disruptor")
        implementation("com.sun.mail:jakarta.mail")
        implementation("com.zaxxer:HikariCP")
        implementation("dev.failsafe:failsafe")
        implementation("io.projectreactor:reactor-test")
        implementation("jakarta.json.bind:jakarta.json.bind-api")
        runtimeOnly("org.glassfish.jaxb:jaxb-runtime") // Implementierung von jakarta.json.bind:jakarta.json.bind-api
        implementation("org.apache.commons:commons-compress")
        implementation("org.apache.logging.log4j:log4j-to-slf4j")
        implementation("org.apache.lucene:lucene-analyzers-common")
        implementation("org.apache.maven:maven-model-builder")
        implementation("org.apache.maven:maven-settings-builder")
        implementation("org.apache.xmlgraphics:batik-codec")
        implementation("org.apache.xmlgraphics:batik-swing")
        implementation("org.apache.xmlgraphics:batik-transcoder")
        implementation("org.codehaus.plexus:plexus-cipher")
        implementation("org.codehaus.plexus:plexus-container-default")
        implementation("org:jaudiotagger")
        implementation("org.hsqldb:hsqldb")
        implementation("org.jsoup:jsoup")
        implementation("org.mariadb.jdbc:mariadb-java-client")
        implementation("org.springframework.boot:spring-boot-starter") {
            exclude group: "ch.qos.logback", module: "logback-classic"
            exclude group: "org.apache.logging.log4j", module: "log4j-to-slf4j"
        }

        javafx {
            version = "$version_javafxBase"
            modules = ["javafx.controls"]
        }

        runtimeOnly("com.oracle.database.jdbc:ojdbc11")
        runtimeOnly("org.slf4j:slf4j-simple")

        testImplementation("org.apache.tomcat:tomcat-catalina") {
            exclude group: "org.apache.tomcat"
        }
        // tomcat-juli ist in tomcat-catalina enthalten, aber auch viele andere Jars die nicht benötigt werden.
        testImplementation("org.apache.tomcat:tomcat-juli")
        testImplementation("org.junit.jupiter:junit-jupiter-engine")
        testImplementation("org.junit.jupiter:junit-jupiter-params")
        testImplementation("org.mockito:mockito-junit-jupiter")
    }
}

project("misc-sudoku") {
    description = "Sodoku Generator"
    dependencies {
        // Es gibt keine Tests, aber es ist ein test-Package vorhanden.
        testImplementation("org.junit.jupiter:junit-jupiter-engine")
    }
}
