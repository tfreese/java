plugins {
    id "java"
    id "org.openjfx.javafxplugin"
}

description = "Alles zum ausprobieren"

configurations {
    jaxb
}

sourceSets {
    main {
        java {
            srcDir(layout.buildDirectory.get().dir("generated-sources").dir("xjc"))
        }
    }
}

dependencies {
    jaxb "com.sun.xml.bind:jaxb-xjc"
    jaxb "com.sun.xml.bind:jaxb-impl"

    javafx {
        version = "$version_javafx"
        modules = ["javafx.controls"]
    }

    implementation("com.fasterxml.jackson.dataformat:jackson-dataformat-xml")
    implementation("com.fasterxml.jackson.module:jackson-module-jaxb-annotations")
    implementation("com.h2database:h2")
    implementation("com.lmax:disruptor")
    implementation("com.zaxxer:HikariCP")
    implementation("dev.failsafe:failsafe")
    implementation("io.projectreactor:reactor-test")
    implementation("jakarta.json.bind:jakarta.json.bind-api")
    implementation("org.apache.commons:commons-compress")
    implementation("org.apache.commons:commons-lang3")
    implementation("org.apache.logging.log4j:log4j-to-slf4j")
    implementation("org.apache.lucene:lucene-analyzers-common")
    implementation("org.apache.xmlgraphics:batik-codec")
    implementation("org.apache.xmlgraphics:batik-swing")
    implementation("org.apache.xmlgraphics:batik-transcoder")
    implementation("org.apache.velocity:velocity-engine-core")
    implementation("org.freemarker:freemarker")
    implementation("org:jaudiotagger")
    implementation("org.hsqldb:hsqldb")
    implementation("org.jsoup:jsoup")
    implementation("org.mariadb.jdbc:mariadb-java-client")
    implementation("org.springframework.boot:spring-boot-starter-mail") {
        exclude group: "ch.qos.logback", module: "logback-classic"
        exclude group: "org.apache.logging.log4j", module: "log4j-to-slf4j"
    }

    runtimeOnly("com.oracle.database.jdbc:ojdbc11")
    runtimeOnly("org.glassfish.jaxb:jaxb-runtime") // Implementation of jakarta.json.bind:jakarta.json.bind-api
    runtimeOnly("org.slf4j:slf4j-simple")

    // tomcat-juli ist in tomcat-catalina enthalten, aber auch viele andere Jars die nicht ben√∂tigt werden.
    testImplementation("org.apache.tomcat:tomcat-catalina") {
        exclude group: "org.apache.tomcat"
    }
    testImplementation("org.apache.tomcat:tomcat-juli")
}

tasks.register("xslt") {
    group = "My Tasks"

//    dependsOn("compileJava")

    def srcFolder = layout.projectDirectory.dir("src").dir("xslt")
    def style = srcFolder.file("article.xsl")
    def xml = srcFolder.file("article.xml")
    inputs.files(style, xml)

    def destFolder = layout.buildDirectory.get().dir("classes").dir("java").dir("main").dir("xslt")
    outputs.dir destFolder

    doLast {
        mkdir destFolder

        ant.xslt(style: style,
                in: xml,
                out: destFolder.file("article.html")
        )
    }
}

tasks.register("genJaxb") {
    group = "My Tasks"

    def resourcesDir = layout.projectDirectory.dir("schemas")
    inputs.dir resourcesDir

    def binding = layout.projectDirectory.file("schema.xjb")
    inputs.file binding

    def destdir = layout.buildDirectory.get().dir("generated-sources").dir("xjc")
    outputs.dir destdir

    doLast {
        mkdir destdir

        ant {
            taskdef name: "xjc", classname: "com.sun.tools.xjc.XJCTask", classpath: configurations.jaxb.asPath

            xjc(destdir: destdir,
                    schema: resourcesDir.dir("GolfCountryClub").file("GolfCountryClub.xsd"),
                    binding: binding,
                    package: "de.freese.xjc.golfcountryclub",
                    encoding: compileJava.options.encoding,
                    readonly: true,
                    extension: true) {
                arg(value: "-npa")
            }

            xjc(destdir: destdir,
                    schema: resourcesDir.dir("PhoneBanking").file("PhoneBanking.xsd"),
                    binding: binding,
                    package: "de.freese.xjc.phonebanking",
                    encoding: compileJava.options.encoding,
                    readonly: true,
                    extension: true) {
                arg(value: "-npa")
            }

            xjc(destdir: destdir,
                    schema: resourcesDir.dir("PublicationCatalogue").file("Catalogue.xsd"),
                    binding: binding,
                    package: "de.freese.xjc.catalogue",
                    encoding: compileJava.options.encoding,
                    readonly: true,
                    extension: true) {
                arg(value: "-npa")
            }

            xjc(destdir: destdir,
                    schema: resourcesDir.dir("SpaceWarGame").file("SpaceWarGame.xsd"),
                    binding: binding,
                    package: "de.freese.xjc.spacewargame",
                    encoding: compileJava.options.encoding,
                    readonly: true,
                    extension: true) {
                arg(value: "-npa")
            }
        }
    }
}
compileJava.dependsOn("xslt", "genJaxb")
