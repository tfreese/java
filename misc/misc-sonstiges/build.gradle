plugins {
    id("java")
    id("org.openjfx.javafxplugin")
    id("maven-publish")
}

description = "Alles zum ausprobieren"

configurations {
    jaxb
}

def destDirXjc = layout.buildDirectory.get().dir("generated").dir("xjc")

sourceSets {
    main {
        java {
            srcDir(destDirXjc)
        }
    }
}

dependencies {
    // implementation("com.sun.xml.bind:jaxb-xjc")
    jaxb("com.sun.xml.bind:jaxb-xjc")
    jaxb("com.sun.xml.bind:jaxb-impl")

    implementation("com.fasterxml.jackson.dataformat:jackson-dataformat-xml")
    implementation("com.fasterxml.jackson.module:jackson-module-jaxb-annotations")

    implementation("com.lmax:disruptor")
    implementation("com.zaxxer:HikariCP")
    implementation("dev.failsafe:failsafe")
    implementation("io.projectreactor:reactor-test")
    implementation("jakarta.json.bind:jakarta.json.bind-api")
    implementation("jakarta.xml.bind:jakarta.xml.bind-api")
    implementation("net.jthink:jaudiotagger")
    implementation("org.apache.commons:commons-compress")
    implementation("org.apache.commons:commons-lang3")
    implementation("org.apache.logging.log4j:log4j-to-slf4j")
    implementation("org.apache.lucene:lucene-analysis-common")
    implementation("org.apache.lucene:lucene-queryparser")
    implementation("org.apache.xmlgraphics:batik-codec")
    implementation("org.apache.xmlgraphics:batik-swing")
    implementation("org.apache.velocity:velocity-engine-core")
    implementation("org.freemarker:freemarker")
    implementation("org.jsoup:jsoup")
    implementation("org.mariadb.jdbc:mariadb-java-client")
    implementation("org.springframework.boot:spring-boot-starter-mail") {
        exclude(group: "ch.qos.logback", module: "logback-classic")
        exclude(group: "org.apache.logging.log4j", module: "log4j-to-slf4j")
    }

    runtimeOnly("com.oracle.database.jdbc:ojdbc11")
    runtimeOnly("org.glassfish.jaxb:jaxb-runtime") // Implementation of jakarta.json.bind:jakarta.json.bind-api
    runtimeOnly("org.hsqldb:hsqldb")
    runtimeOnly("org.slf4j:slf4j-simple")

    testImplementation("com.h2database:h2")
    testImplementation("org.apache.tomcat:tomcat-catalina") {
        // tomcat-juli ist in tomcat-catalina enthalten, aber auch viele andere Jars die nicht ben√∂tigt werden.
        exclude(group: "org.apache.tomcat")
    }
    testImplementation("org.apache.tomcat:tomcat-juli")
}

static def xsltTask(Task task, RegularFile xslfile, RegularFile xmlFile, RegularFile outputfile) {
    task.inputs.files(xslfile, xmlFile)
    task.outputs.file(outputfile)

    task.doLast {
        // mkdir(outputfile.getAsFile().getParent())

        ant.xslt(style: xslfile,
                in: xmlFile,
                out: outputfile
        )
    }
}

tasks.register("xslt") {
    group = "MyTasks"

//    dependsOn("compileJava")

    Directory srcFolder = layout.projectDirectory.dir("src").dir("xslt")
    Directory destFolder = layout.buildDirectory.get().dir("classes").dir("java").dir("main").dir("xslt")

    RegularFile xslFile = srcFolder.file("article.xsl")
    RegularFile xmlFile = srcFolder.file("article.xml")
    RegularFile outputFile = destFolder.file("article.html")

    xsltTask(it, xslFile, xmlFile, outputFile)

    // inputs.files(xslFile, xmlFile)
    // outputs.file(outputFile)
    //
    // doLast {
    //     mkdir destFolder
    //
    //     ant.xslt(style: xslFile,
    //             in: xmlFile,
    //             out: outputFile
    //     )
    // }
}

// class MyTask extends DefaultTask {
//     @TaskAction
//     void runTask() {
//         project.ant.taskdef(..., classpath: projects.configurations.myConfig.asPath)
//     }
// }
tasks.register("testXjcTask", de.freese.gradle.java.xjc.XjcTask) {
    // group = "MyTasks"

    destDir.set(layout.buildDirectory.get().dir("generated").dir("xjcTask"))
    schema.set(layout.projectDirectory.dir("schemas").dir("GolfCountryClub").file("GolfCountryClub.xsd"))
    binding.set(layout.projectDirectory.file("schema.xjb"))
    packageName.set("de.freese.xjc.golfcountryclub")
    encoding.set(compileJava.options.encoding)
    extension.set(true)
    npa.set(true)
    removeOldOutput.set(true)
    verbose.set(true)
}

tasks.register("genJaxb") {
    group = "MyTasks"

    def schemaDir = layout.projectDirectory.dir("schemas")
    inputs.dir(schemaDir)

    def binding = layout.projectDirectory.file("schema.xjb")
    inputs.file(binding)

    outputs.dir(destDirXjc)

    // doLast {
    mkdir(destDirXjc)

    ant {
        taskdef(name: "xjc", classname: "com.sun.tools.xjc.XJCTask", classpath: configurations.jaxb.asPath)

        xjc(destdir: destDirXjc,
                schema: schemaDir.dir("GolfCountryClub").file("GolfCountryClub.xsd"),
                binding: binding,
                package: "de.freese.xjc.golfcountryclub",
                encoding: compileJava.options.encoding,
                extension: true,
                removeOldOutput: true) {
            arg(value: "-npa")

            // XJC has embedded Build-Cache.
            // Files specified as the schema files and binding files are automatically added to the "depends" set as well,
            // but if those schemas are including/importing other schemas, you have to use a nested <depends> elements.

            // Avoid Message: Consider using <depends>/<produces> so that XJC won't do unnecessary compilation.

            //depends(file: binding)
            //depends(dir: schemaDir.dir("GolfCountryClub"), includes: "**/*.xsd")
            // produces(dir: destDirXjc, includes: "**/*.java")
            produces(dir: destDirXjc, includes: "de/freese/xjc/golfcountryclub/**/*.java")
        }

        xjc(destdir: destDirXjc,
                schema: schemaDir.dir("PhoneBanking").file("PhoneBanking.xsd"),
                binding: binding,
                package: "de.freese.xjc.phonebanking",
                encoding: compileJava.options.encoding,
                extension: true) {
            arg(value: "-npa")
            produces(dir: destDirXjc, includes: "de/freese/xjc/phonebanking/**/*.java")
        }

        xjc(destdir: destDirXjc,
                schema: schemaDir.dir("PublicationCatalogue").file("Catalogue.xsd"),
                binding: binding,
                package: "de.freese.xjc.catalogue",
                encoding: compileJava.options.encoding,
                readonly: true,
                extension: true) {
            arg(value: "-npa")
            produces(dir: destDirXjc, includes: "de/freese/xjc/catalogue/**/*.java")
        }

        xjc(destdir: destDirXjc,
                schema: schemaDir.dir("SpaceWarGame").file("SpaceWarGame.xsd"),
                binding: binding,
                package: "de.freese.xjc.spacewargame",
                encoding: compileJava.options.encoding,
                extension: true) {
            arg(value: "-npa")
            produces(dir: destDirXjc, includes: "de/freese/xjc/spacewargame/**/*.java")
        }
        // }
    }
}
compileJava.dependsOn("xslt", "genJaxb")
// compileJava.finalizedBy("xslt", "genJaxb")
