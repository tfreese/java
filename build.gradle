// Execute Tasks in SubModule: gradle MODUL:clean build
plugins {
    id "de.freese.gradle.conventions" version "$version_myConventionPlugin" apply false
    id "io.spring.dependency-management" version "$version_springDependencyManagement" apply false
    id "org.openjfx.javafxplugin" version "$version_javafxPlugin" apply false
    id "org.springframework.boot" version "$version_springBoot" apply false
    id "name.remal.sonarlint" version "$version_nameRemalSonarlint" apply false
    id "de.freese.gradle.sonarlint-conventions" version "$version_myConventionPlugin" apply false
}

subprojects {
    apply plugin: "base"
    apply plugin: "de.freese.gradle.conventions"
    apply plugin: "io.spring.dependency-management"
    // apply plugin: "name.remal.sonarlint"
    // apply plugin: "de.freese.gradle.sonarlint-conventions"

    dependencyManagement {
        imports {
            //mavenBom(org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES)
            mavenBom("org.springframework.boot:spring-boot-dependencies:$version_springBoot")
        }

        dependencies {
            dependency("ch.qos.logback.db:logback-classic-db:$version_logbackClassicDb")
            dependency("com.danielflower.apprunner:javasysmon:$version_javasysmon")
            dependency("com.lmax:disruptor:$version_disruptor")
            dependency("dev.failsafe:failsafe:$version_failsafe")
            dependency("org.apache.commons:commons-compress:$version_commonsCompress")
            dependency("org.apache.lucene:lucene-analyzers-common:$version_lucene")

            dependencySet(group: "org.apache.maven", version: "$version_maven") {
                entry "maven-model-builder"
                entry "maven-settings-builder"
            }

            dependencySet(group: "org.apache.tomcat", version: dependencyManagement.importedProperties["tomcat.version"]) {
                entry "tomcat-catalina"
                entry "tomcat-juli"
            }

            dependencySet(group: "org.apache.xmlgraphics", version: "$version_batik") {
                entry "batik-codec"
                entry "batik-swing"
            }

            dependency("org:jaudiotagger:$version_jaudiotagger")
            dependency("org.jsoup:jsoup:$version_jsoup")

            dependency("org.jfree:jfreechart:$version_jfreechart") {
                // exclude "com.lowagie:itext"
                // exclude "xml-apis:xml-apis"
            }

            dependency("org.apache.velocity:velocity-engine-core:$version_velocity")
        }
    }

    afterEvaluate { project ->
        if (project.plugins.hasPlugin("java")
                || project.plugins.hasPlugin("java-library")
                || project.plugins.hasPlugin("application")) {
            dependencies {
                //implementation(platform("org.springframework.boot:spring-boot-dependencies:$version_springBoot"))

                testImplementation("org.assertj:assertj-core")
                testImplementation("org.awaitility:awaitility")
                testImplementation("org.junit.jupiter:junit-jupiter")
                testImplementation("org.mockito:mockito-junit-jupiter")
                testRuntimeOnly("org.junit.platform:junit-platform-launcher")
                testRuntimeOnly("org.slf4j:slf4j-simple")
            }
        }
    }
}
